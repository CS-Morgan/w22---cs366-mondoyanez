@model ColorInterpolation
@{
    ViewData["Title"] = "CS 366 HW4";
}

<div class=row>
    <h1>Interpolate from one color to another</h1>
</div>

<div class="row">
    <div class="col-md-6">
        <p>Please enter colors in HTML hexadecimal format #AABBCC</p>

        <form asp-controller="ColorInterpolator" asp-action="Create" method="post">
            <div asp-validation-summary="All"></div>

            <div class="row">
                <label>First color</label>
            </div>
            <div class="row">
                <input asp-for="FirstColor" placeholder="#12B37F">
            </div>

            <div class="row">
                <label>Second color</label>
            </div>
            <div class="row">
                <input asp-for="SecondColor" placeholder="#A13344">
            </div>

            <div class="row">
                <label for="colors">Number of Colors</label>    
            </div>
            <div class="row">
                <input id="colors" asp-for="NumColors" min="2" max="50">
            </div>

            <br>

            <div class="row">
                <button class="rounded btn-primary" type="submit">Generate Colors</button>
            </div>

        </form>

    </div>
    @* <div class="col-md-4">
        <p>HTML</p>
    </div>
    <div class="col-md-2">
        <p>Color</p>
    </div> *@

</div>

@if (Model != null)
{
    double hueStart, saturationStart, valueStart;
    double hueEnd, saturationEnd, valueEnd;

    Color colorStart = new Color();
    Color colorEnd = new Color();

    colorStart = colorStart.HexToColor(@Model.FirstColor);
    colorEnd = colorEnd.HexToColor(@Model.SecondColor);

    ColorInterpolation.ColorToHSV(colorStart, out hueStart, out saturationStart, out valueStart);
    ColorInterpolation.ColorToHSV(colorEnd, out hueEnd, out saturationEnd, out valueEnd);

    var hueIncrement = (hueEnd - hueStart) / (@Model.NumColors);
    var satIncrement = (saturationEnd - saturationStart) / (@Model.NumColors);
    var valueIncrement = (valueEnd - valueStart) / (@Model.NumColors);

    <div class="row">
        <div class="col-md-6"></div>
        <div class="col-md-1"><p>HTML</p></div>
        <div class="col-md-2"><p>Color</p></div>
    </div>

    @if (Model.FirstColor.Substring(0,1).Equals("#"))
    {
        <div class="row">
            <div class="col-md-6"></div>
            <div class="col-md-1"><p>@Model.FirstColor</p></div>
            <div class="col-md-2 current-color" style="background-color: @Model.FirstColor;"></div>
        </div>
    }
    else 
    {
        <div class="row">
            <div class="col-md-6"></div>
            <div class="col-md-1"><p>#@Model.FirstColor</p></div>
            <div class="col-md-2 current-color" style="background-color: #@Model.FirstColor;"></div>
        </div>
    }


    @for (int i = 1; i < @Model.NumColors - 1; i++)
    {
        var newHue = (double)(hueStart + hueIncrement * i);
        var newSat = (double)(saturationStart + satIncrement * i);
        var newValue = (double)(valueStart + valueIncrement * i);

        Color newColor = ColorInterpolation.ColorFromHSV(newHue, newSat, newValue);

        string newHex = "#" + newColor.RGBToHex();

        <div class="row">
            <div class="col-md-6"></div>
            <div class="col-md-1"><p>@newHex</p></div>
            <div class="col-md-2 current-color" style="background-color: @newHex;"></div>
        </div>
    }

    @if (Model.SecondColor.Substring(0,1).Equals("#"))
    {
        <div class="row">
            <div class="col-md-6"></div>
            <div class="col-md-1"><p>@Model.SecondColor</p></div>
            <div class="col-md-2 current-color" style="background-color: @Model.SecondColor;"></div>
        </div>
    }
    else 
    {
        <div class="row">
            <div class="col-md-6"></div>
            <div class="col-md-1"><p>#@Model.SecondColor</p></div>
            <div class="col-md-2 current-color" style="background-color: #@Model.SecondColor;"></div>
        </div>
    }
    
}